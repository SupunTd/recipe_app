{"ast":null,"code":"var _jsxFileName = \"D:\\\\Academic\\\\FYP\\\\WebApp\\\\Text2Pic\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Heading, Container, Stack, Text, Flex, Box, SimpleGrid, Icon, useColorModeValue, Button, Input, InputGroup, InputRightElement } from '@chakra-ui/react';\nimport { FcComments, FcImageFile, FcCheckmark, FcDownload } from 'react-icons/fc';\nimport { Layout } from '../components/Layout';\nimport { saveAs } from 'file-saver';\nimport { AiOutlineSave, AiOutlineDownload } from 'react-icons/ai';\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\n//import { storage, auth } from '../firebase';  // Import storage and auth from your firebase.js\n//import { auth } from '../utils/init-firebase';\nimport { storage, auth } from '../utils/init-firebase'; // Adjust the path according to your project structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedPage() {\n  _s();\n  //const { colorMode } = useColorMode();\n  const bgColor = useColorModeValue('gray.100', 'gray.700');\n  const userBgColor = useColorModeValue('gray.200', 'gray.600');\n  //const botBgColor = useColorModeValue('green.100', 'green.700');\n  //const textColor = useColorModeValue('gray.700', 'white');\n  const buttonBgColor = useColorModeValue('blue.400', 'blue.300'); // Button background color\n  const buttonTextColor = useColorModeValue('white', 'gray.800'); // Button text color\n  const buttonHoverBgColor = useColorModeValue('blue.500', 'blue.400'); // Hover background color\n\n  const [chatHistory, setChatHistory] = useState([{\n    role: 'bot',\n    message: \"Hi, How can I assist you?\"\n  }]);\n  const [message, setMessage] = useState('');\n  const addMessageToChat = (role, message) => {\n    setChatHistory(prevHistory => [...prevHistory, {\n      role,\n      message\n    }]);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n  const matchImageURL = message => {\n    const regex = /\\[(.*?)\\]\\((.*?)\\)/; // Regular expression to capture text and link\n    const match = message.match(regex);\n    return match;\n  };\n  const sendMessage = async () => {\n    if (!message.trim()) return;\n    const payload = {\n      human_msg: message\n    };\n    const url = process.env.REACT_APP_TEXT_TO_IMAGE_API_URL;\n    try {\n      addMessageToChat('user', `${message}`);\n      setMessage('');\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const responseData = await response.json();\n      const botResponse = responseData.ai_msg; // response message is in 'ai_msg' field\n      const match = matchImageURL(botResponse);\n      if (match) {\n        const imageUrl = match[2]; // Second capture group contains the URL\n        addMessageToChat('bot', `${botResponse.slice(0, match.index)}`);\n        addMessageToChat('image', `${imageUrl}`);\n        addMessageToChat('bot', `${botResponse.slice(match.index + match[0].length)}`);\n        // Use imageUrl to display the image\n      } else {\n        addMessageToChat('bot', `${botResponse}`);\n      }\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      addMessageToChat('bot', 'Bot: Sorry, I encountered an error. Please try again later.');\n    }\n  };\n  const saveImageToFirebase = async imageUrl => {\n    try {\n      // Fetch the image blob without using CORS Anywhere\n      const response = await fetch(imageUrl, {\n        mode: 'cors'\n      });\n      const blob = await response.blob();\n\n      // Check if the blob is valid\n      if (!blob || !blob.type.startsWith('image/')) {\n        throw new Error('The fetched file is not a valid image.');\n      }\n\n      // Get the current user\n      const user = auth.currentUser;\n      if (user) {\n        const userId = user.uid;\n\n        // Create a reference to the storage location\n        const storageRef = ref(storage, `images/${userId}/${Date.now()}_image.jpg`);\n\n        // Add metadata to ensure proper content type\n        const metadata = {\n          contentType: blob.type // Set the MIME type from the blob\n        };\n\n        // Upload the file\n        const uploadTask = uploadBytesResumable(storageRef, blob, metadata);\n        uploadTask.on('state_changed', snapshot => {\n          // Observe state change events such as progress, pause, and resume\n          const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n          console.log('Upload is ' + progress + '% done');\n        }, error => {\n          // Handle unsuccessful uploads\n          console.error('Upload failed:', error);\n        }, () => {\n          // Handle successful uploads on complete\n          getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n            console.log('File available at', downloadURL);\n            // You can save this downloadURL in your database if needed\n          });\n        });\n      } else {\n        console.error('No user signed in');\n      }\n    } catch (error) {\n      console.error('Error uploading image:', error);\n    }\n  };\n  const handleSaveButtonClick = imageUrl => {\n    saveImageToFirebase(imageUrl);\n  };\n\n  // image is opening in a new tab\n\n  const downloadImage = async imageUrl => {\n    try {\n      const response = await fetch(imageUrl);\n      if (!response.ok) {\n        throw new Error('Failed to fetch image.');\n      }\n      const blob = await response.blob();\n      saveAs(blob, 'generated_image.jpg'); // Ensure the filename is provided here\n    } catch (error) {\n      console.error('Error downloading image:', error);\n    }\n  };\n  const Feature = ({\n    title,\n    icon\n  }) => {\n    return /*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        w: 12,\n        h: 12,\n        align: 'center',\n        justify: 'center',\n        color: 'white',\n        rounded: 'full',\n        bg: 'gray.100',\n        mb: 1,\n        children: icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        fontWeight: 600,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  };\n  const handleNewChat = () => {\n    setChatHistory([{\n      role: 'bot',\n      message: \"Hi, How can I assist you?\"\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxW: '7xl',\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 4,\n        mt: 10,\n        mb: 20,\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            bg: bgColor,\n            p: 4,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              mt: 4,\n              bg: buttonBgColor,\n              color: buttonTextColor,\n              _hover: {\n                bg: buttonHoverBgColor\n              },\n              onClick: handleNewChat,\n              children: \"New Chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            w: \"100%\",\n            bg: bgColor,\n            p: 4,\n            borderRadius: \"md\",\n            height: \"600px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              flex: \"1\",\n              overflowY: \"auto\",\n              p: 3,\n              children: /*#__PURE__*/_jsxDEV(Stack, {\n                spacing: 3,\n                children: chatHistory.map((chat, index) => /*#__PURE__*/_jsxDEV(Box, {\n                  bg: chat.role === 'bot' || chat.role === 'image' ? bgColor : userBgColor,\n                  p: 3,\n                  borderRadius: \"md\",\n                  alignSelf: chat.role === 'bot' || chat.role === 'image' ? 'flex-start' : 'flex-end',\n                  children: chat.role === 'image' ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                      src: chat.message,\n                      alt: \"Generated\",\n                      width: \"300px\",\n                      height: \"300px\",\n                      onClick: downloadImage\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 234,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      leftIcon: /*#__PURE__*/_jsxDEV(AiOutlineSave, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 244,\n                        columnNumber: 37\n                      }, this),\n                      mt: 2,\n                      mr: 2,\n                      bg: buttonBgColor,\n                      color: buttonTextColor,\n                      _hover: {\n                        bg: buttonHoverBgColor\n                      },\n                      onClick: () => handleSaveButtonClick(chat.message),\n                      children: \"Save\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 243,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      as: \"a\",\n                      href: chat.message,\n                      target: \"_blank\",\n                      rel: \"noopener noreferrer\",\n                      download: \"generated_image.jpg\",\n                      leftIcon: /*#__PURE__*/_jsxDEV(AiOutlineDownload, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 261,\n                        columnNumber: 37\n                      }, this),\n                      mt: 2,\n                      bg: buttonBgColor,\n                      color: buttonTextColor,\n                      _hover: {\n                        bg: buttonHoverBgColor\n                      },\n                      children: \"Download\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 255,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 233,\n                    columnNumber: 23\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: chat.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 23\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 19\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n              size: \"md\",\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                placeholder: \"Type your message here...\",\n                value: message,\n                onChange: e => setMessage(e.target.value),\n                onKeyPress: handleKeyPress,\n                bg: userBgColor,\n                borderRadius: \"md\",\n                focusBorderColor: \"blue.500\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(InputRightElement, {\n                width: \"4.5rem\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  h: \"1.75rem\",\n                  size: \"sm\",\n                  onClick: sendMessage,\n                  bg: buttonBgColor,\n                  color: buttonTextColor,\n                  _hover: {\n                    bg: buttonHoverBgColor\n                  },\n                  children: \"Send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      align: 'center',\n      spacing: {\n        base: 2,\n        md: 4\n      },\n      py: {\n        base: 2,\n        md: 2\n      },\n      direction: {\n        base: 'column',\n        md: 'row'\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        flex: 1,\n        spacing: {\n          base: 1,\n          md: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Heading, {\n          lineHeight: 1.1,\n          fontWeight: 600,\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            as: 'span',\n            color: 'red.400',\n            fontSize: {\n              base: '2xl',\n              sm: '3xl',\n              lg: '4xl'\n            },\n            children: \"Guidelines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      p: 4,\n      children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n        columns: {\n          base: 1,\n          md: 4\n        },\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Feature, {\n          icon: /*#__PURE__*/_jsxDEV(Icon, {\n            as: FcComments,\n            w: 10,\n            h: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 21\n          }, this),\n          title: '1. Input your desired image description.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Feature, {\n          icon: /*#__PURE__*/_jsxDEV(Icon, {\n            as: FcImageFile,\n            w: 10,\n            h: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 21\n          }, this),\n          title: '2. The chatbot interprets and generates a relevant image.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Feature, {\n          icon: /*#__PURE__*/_jsxDEV(Icon, {\n            as: FcCheckmark,\n            w: 10,\n            h: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 21\n          }, this),\n          title: '3. Review and refine until satisfied.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Feature, {\n          icon: /*#__PURE__*/_jsxDEV(Icon, {\n            as: FcDownload,\n            w: 10,\n            h: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 21\n          }, this),\n          title: '4. Download your high-quality image, tailored to your specifications!'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n}\n_s(ProtectedPage, \"du/nmGLOVeRKJqolfig0SJhLPMU=\", false, function () {\n  return [useColorModeValue, useColorModeValue, useColorModeValue, useColorModeValue, useColorModeValue];\n});\n_c = ProtectedPage;\nvar _c;\n$RefreshReg$(_c, \"ProtectedPage\");","map":{"version":3,"names":["React","useState","Heading","Container","Stack","Text","Flex","Box","SimpleGrid","Icon","useColorModeValue","Button","Input","InputGroup","InputRightElement","FcComments","FcImageFile","FcCheckmark","FcDownload","Layout","saveAs","AiOutlineSave","AiOutlineDownload","ref","uploadBytesResumable","getDownloadURL","storage","auth","jsxDEV","_jsxDEV","ProtectedPage","_s","bgColor","userBgColor","buttonBgColor","buttonTextColor","buttonHoverBgColor","chatHistory","setChatHistory","role","message","setMessage","addMessageToChat","prevHistory","handleKeyPress","e","key","sendMessage","matchImageURL","regex","match","trim","payload","human_msg","url","process","env","REACT_APP_TEXT_TO_IMAGE_API_URL","response","fetch","method","headers","body","JSON","stringify","responseData","json","botResponse","ai_msg","imageUrl","slice","index","length","error","console","saveImageToFirebase","mode","blob","type","startsWith","Error","user","currentUser","userId","uid","storageRef","Date","now","metadata","contentType","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","log","then","downloadURL","handleSaveButtonClick","downloadImage","ok","Feature","title","icon","spacing","children","w","h","align","justify","color","rounded","bg","mb","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","handleNewChat","maxW","mt","p","_hover","onClick","borderRadius","height","display","flexDirection","flex","overflowY","map","chat","alignSelf","src","alt","width","leftIcon","mr","as","href","target","rel","download","size","placeholder","value","onChange","onKeyPress","focusBorderColor","base","md","py","direction","lineHeight","fontSize","sm","lg","columns","_c","$RefreshReg$"],"sources":["D:/Academic/FYP/WebApp/Text2Pic/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Heading,\r\n  Container,\r\n  Stack,\r\n  Text,\r\n  Flex,\r\n  Box,\r\n  SimpleGrid,\r\n  Icon,\r\n  useColorModeValue,\r\n  Button,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  \r\n} from '@chakra-ui/react';\r\nimport { FcComments, FcImageFile, FcCheckmark, FcDownload } from 'react-icons/fc';\r\nimport { Layout } from '../components/Layout';\r\nimport { saveAs } from 'file-saver';\r\nimport { AiOutlineSave, AiOutlineDownload } from 'react-icons/ai';\r\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\r\n//import { storage, auth } from '../firebase';  // Import storage and auth from your firebase.js\r\n//import { auth } from '../utils/init-firebase';\r\nimport { storage, auth } from '../utils/init-firebase';  // Adjust the path according to your project structure\r\n\r\nexport default function ProtectedPage() {\r\n  //const { colorMode } = useColorMode();\r\n  const bgColor = useColorModeValue('gray.100', 'gray.700');\r\n  const userBgColor = useColorModeValue('gray.200', 'gray.600');\r\n  //const botBgColor = useColorModeValue('green.100', 'green.700');\r\n  //const textColor = useColorModeValue('gray.700', 'white');\r\n  const buttonBgColor = useColorModeValue('blue.400', 'blue.300'); // Button background color\r\n  const buttonTextColor = useColorModeValue('white', 'gray.800'); // Button text color\r\n  const buttonHoverBgColor = useColorModeValue('blue.500', 'blue.400'); // Hover background color\r\n\r\n  const [chatHistory, setChatHistory] = useState([\r\n    { role: 'bot', message: \"Hi, How can I assist you?\" },\r\n  ]);\r\n  const [message, setMessage] = useState('');\r\n\r\n  const addMessageToChat = (role, message) => {\r\n    setChatHistory((prevHistory) => [...prevHistory, { role, message }]);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const matchImageURL = (message) => {\r\n    const regex = /\\[(.*?)\\]\\((.*?)\\)/; // Regular expression to capture text and link\r\n    const match = message.match(regex);\r\n    return match;\r\n  }\r\n\r\n  const sendMessage = async () => {\r\n    if (!message.trim()) return;\r\n    const payload = {\r\n      human_msg: message\r\n    };\r\n    const url = process.env.REACT_APP_TEXT_TO_IMAGE_API_URL;\r\n    \r\n    try {\r\n      addMessageToChat('user', `${message}`);\r\n      setMessage('');\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      const responseData = await response.json();\r\n      const botResponse = responseData.ai_msg; // response message is in 'ai_msg' field\r\n      const match = matchImageURL(botResponse);\r\n\r\n      if (match) {\r\n        const imageUrl = match[2]; // Second capture group contains the URL\r\n        addMessageToChat('bot', `${botResponse.slice(0, match.index)}`);\r\n        addMessageToChat('image', `${imageUrl}`);\r\n        addMessageToChat('bot', `${botResponse.slice(match.index + match[0].length)}`);\r\n        // Use imageUrl to display the image\r\n      } else {\r\n        addMessageToChat('bot', `${botResponse}`);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching response:', error);\r\n      addMessageToChat('bot', 'Bot: Sorry, I encountered an error. Please try again later.');\r\n    }\r\n  };\r\n\r\n\r\n  const saveImageToFirebase = async (imageUrl) => {\r\n    try {\r\n      // Fetch the image blob without using CORS Anywhere\r\n      const response = await fetch(imageUrl, { mode: 'cors' });\r\n      const blob = await response.blob();\r\n\r\n      // Check if the blob is valid\r\n      if (!blob || !blob.type.startsWith('image/')) {\r\n        throw new Error('The fetched file is not a valid image.');\r\n      }\r\n\r\n      // Get the current user\r\n      const user = auth.currentUser;\r\n\r\n      if (user) {\r\n        const userId = user.uid;\r\n\r\n        // Create a reference to the storage location\r\n        const storageRef = ref(storage, `images/${userId}/${Date.now()}_image.jpg`);\r\n\r\n        // Add metadata to ensure proper content type\r\n        const metadata = {\r\n          contentType: blob.type, // Set the MIME type from the blob\r\n        };\r\n\r\n        // Upload the file\r\n        const uploadTask = uploadBytesResumable(storageRef, blob, metadata);\r\n\r\n        uploadTask.on(\r\n          'state_changed',\r\n          (snapshot) => {\r\n            // Observe state change events such as progress, pause, and resume\r\n            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log('Upload is ' + progress + '% done');\r\n          },\r\n          (error) => {\r\n            // Handle unsuccessful uploads\r\n            console.error('Upload failed:', error);\r\n          },\r\n          () => {\r\n            // Handle successful uploads on complete\r\n            getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n              console.log('File available at', downloadURL);\r\n              // You can save this downloadURL in your database if needed\r\n            });\r\n          }\r\n        );\r\n      } else {\r\n        console.error('No user signed in');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleSaveButtonClick = (imageUrl) => {\r\n    saveImageToFirebase(imageUrl);\r\n  };\r\n\r\n\r\n\r\n// image is opening in a new tab\r\n\r\n  const downloadImage = async (imageUrl) => {\r\n    try {\r\n      const response = await fetch(imageUrl);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch image.');\r\n      }\r\n      const blob = await response.blob();\r\n      saveAs(blob, 'generated_image.jpg'); // Ensure the filename is provided here\r\n    } catch (error) {\r\n      console.error('Error downloading image:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const Feature = ({ title, icon }) => {\r\n    return (\r\n      <Stack spacing={2}>\r\n        <Flex\r\n          w={12}\r\n          h={12}\r\n          align={'center'}\r\n          justify={'center'}\r\n          color={'white'}\r\n          rounded={'full'}\r\n          bg={'gray.100'}\r\n          mb={1}>\r\n          {icon}\r\n        </Flex>\r\n        <Text fontWeight={600}>{title}</Text>\r\n      </Stack>\r\n    );\r\n  };\r\n\r\n  const handleNewChat = () => {\r\n    setChatHistory([{ role: 'bot', message: \"Hi, How can I assist you?\" }]);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <Layout>\r\n      <Container maxW={'7xl'}> \r\n        <Stack spacing={4} mt={10} mb={20}>\r\n          <Flex>       \r\n            <Box bg={bgColor}  p={4}>\r\n              \r\n              <Button mt={4} \r\n                      bg={buttonBgColor}\r\n                      color={buttonTextColor}\r\n                      _hover={{ bg: buttonHoverBgColor }} \r\n                      onClick={handleNewChat}\r\n              >\r\n                 New Chat\r\n              </Button>\r\n            </Box>\r\n            \r\n            <Box w=\"100%\" bg={bgColor} p={4} borderRadius=\"md\" height=\"600px\" display=\"flex\" flexDirection=\"column\">\r\n            <Box flex=\"1\" overflowY=\"auto\" p={3}>\r\n              <Stack spacing={3}>\r\n                {chatHistory.map((chat, index) => (\r\n                  <Box\r\n                    key={index}\r\n                    bg={chat.role === 'bot' || chat.role === 'image' ? bgColor : userBgColor}\r\n                    p={3}\r\n                    borderRadius=\"md\"\r\n                    alignSelf={chat.role === 'bot' || chat.role === 'image' ? 'flex-start' : 'flex-end'}>\r\n                    {chat.role === 'image' ? (\r\n                      <div>\r\n                        <img src={chat.message} \r\n                        alt=\"Generated\" \r\n                        width=\"300px\" \r\n                        height=\"300px\" \r\n                        onClick={downloadImage}\r\n                        />\r\n                        {/* <a href={chat.message} target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: 'underline', color: 'aqua' }}>Open image in new tab</a>*/}\r\n                        \r\n                                                \r\n                        <Button\r\n                          leftIcon={<AiOutlineSave />}\r\n                          mt={2}\r\n                          mr={2}\r\n                          bg={buttonBgColor}\r\n                          color={buttonTextColor}\r\n                          _hover={{ bg: buttonHoverBgColor }}\r\n                          onClick={() => handleSaveButtonClick(chat.message)}\r\n                        >\r\n                          Save\r\n                        </Button>\r\n\r\n                        <Button\r\n                          as=\"a\"\r\n                          href={chat.message}\r\n                          target=\"_blank\"\r\n                          rel=\"noopener noreferrer\"\r\n                          download=\"generated_image.jpg\"\r\n                          leftIcon={<AiOutlineDownload />}\r\n                          mt={2}\r\n                          bg={buttonBgColor}\r\n                          color={buttonTextColor}\r\n                          _hover={{ bg: buttonHoverBgColor }}\r\n                        >\r\n                        Download\r\n                        </Button>\r\n\r\n                      </div>\r\n                    ) : (\r\n                      <span>{chat.message}</span>\r\n                    )}\r\n                  </Box>\r\n                ))}\r\n              </Stack>\r\n              </Box>\r\n            \r\n            <InputGroup size=\"md\">\r\n              <Input\r\n                type=\"text\"\r\n                placeholder=\"Type your message here...\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n                onKeyPress={handleKeyPress}\r\n                bg={userBgColor}\r\n                borderRadius=\"md\"\r\n                focusBorderColor=\"blue.500\"\r\n              />\r\n              <InputRightElement width=\"4.5rem\">\r\n                <Button \r\n                h=\"1.75rem\" \r\n                size=\"sm\" \r\n                onClick={sendMessage}\r\n                bg={buttonBgColor}\r\n                color={buttonTextColor}\r\n                _hover={{ bg: buttonHoverBgColor }}\r\n              >\r\n                  Send\r\n                </Button>\r\n              </InputRightElement>\r\n            </InputGroup>\r\n\r\n            \r\n            </Box>\r\n            </Flex>\r\n        </Stack>\r\n      </Container>\r\n\r\n      <Stack\r\n          align={'center'}\r\n          spacing={{ base: 2, md: 4 }}\r\n          py={{ base: 2, md: 2 }}\r\n          direction={{ base: 'column', md: 'row' }}>\r\n          <Stack flex={1} spacing={{ base: 1, md: 4 }}>\r\n            <Heading\r\n              lineHeight={1.1}\r\n              fontWeight={600}>\r\n              <Text as={'span'} color={'red.400'} fontSize={{ base: '2xl', sm: '3xl', lg: '4xl' }}>\r\n                Guidelines\r\n              </Text>\r\n              <br />\r\n            </Heading>\r\n          </Stack>\r\n        </Stack>\r\n\r\n        <Box p={4}>\r\n          <SimpleGrid columns={{ base: 1, md: 4 }} spacing={2}>\r\n            <Feature\r\n              icon={<Icon as={FcComments} w={10} h={10} />}\r\n              title={'1. Input your desired image description.'}\r\n            />\r\n            <Feature\r\n              icon={<Icon as={FcImageFile} w={10} h={10} />}\r\n              title={'2. The chatbot interprets and generates a relevant image.'}\r\n            />\r\n            <Feature\r\n              icon={<Icon as={FcCheckmark} w={10} h={10} />}\r\n              title={'3. Review and refine until satisfied.'}\r\n            />\r\n            <Feature\r\n              icon={<Icon as={FcDownload} w={10} h={10} />}\r\n              title={'4. Download your high-quality image, tailored to your specifications!'}\r\n            />\r\n          </SimpleGrid>\r\n        </Box>\r\n\r\n    </Layout>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}